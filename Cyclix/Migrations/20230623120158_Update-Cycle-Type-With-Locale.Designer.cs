// <auto-generated />
using System;
using Cyclix.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cyclix.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230623120158_Update-Cycle-Type-With-Locale")]
    partial class UpdateCycleTypeWithLocale
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Cyclix.Entities.RepairRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("adjectBreaks")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("adjustingGears")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("batteryCheck")
                        .HasColumnType("INTEGER");

                    b.Property<string>("brandName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("changeBreakPads")
                        .HasColumnType("INTEGER");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("completeCleaning")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("cycleType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("estimatedCost")
                        .HasColumnType("REAL");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("functionCheck")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isElectricCycle")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isResolved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("lightCheck")
                        .HasColumnType("INTEGER");

                    b.Property<string>("moreDetailedIssue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("nr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("servicePricingOption")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("skipServicePackage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("suspension")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("tubeOrTire")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("wheelCentering")
                        .HasColumnType("INTEGER");

                    b.Property<string>("zipCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("RepairRequests");
                });

            modelBuilder.Entity("Cyclix.Models.CycleBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CycleBrands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            name = "Trek"
                        },
                        new
                        {
                            Id = 2,
                            name = "BMC"
                        },
                        new
                        {
                            Id = 3,
                            name = "Scott"
                        });
                });

            modelBuilder.Entity("Cyclix.Models.CycleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("lang")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CycleTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            lang = "en",
                            name = "Rennvelo"
                        },
                        new
                        {
                            Id = 2,
                            lang = "en",
                            name = "Reisevelo"
                        },
                        new
                        {
                            Id = 3,
                            lang = "en",
                            name = "Elektro Velo"
                        },
                        new
                        {
                            Id = 4,
                            lang = "de",
                            name = "Road bike"
                        },
                        new
                        {
                            Id = 5,
                            lang = "de",
                            name = "Trekking bike"
                        },
                        new
                        {
                            Id = 6,
                            lang = "de",
                            name = "Electric bike"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
